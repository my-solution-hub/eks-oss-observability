apiVersion: apps/v1
kind: Deployment
metadata:
  name: world-service
  labels:
    app: world-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: world-service
  template:
    metadata:
      labels:
        app: world-service
        team: database
        environment: dev
        project: microservices
        version: v0.0.1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
      - name: world-service
        image: ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${CLUSTER_NAME}-world-service:latest
        ports:
        - containerPort: 8081
        env:
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        - name: OTEL_EXPORTER_OTLP_PROTOCOL
          value: "grpc"
        - name: OTEL_LOGS_EXPORTER
          value: "none"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: world
  labels:
    app: world-service
spec:
  selector:
    app: world-service
  ports:
  - port: 8081
    targetPort: 8081
  type: ClusterIP
